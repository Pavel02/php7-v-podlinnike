<?php
/**
 * Оригинальные листинги в подкаталоге expr
 *
 *              Переменные.
 *      Типы:
 * - integer
 * - double //  $x = 0.00012 = 1.2e-4
 * - string
 * - array (ассоциативный массив)
 * - object (ссылка на объект)
 * - resource
 * - boolean
 * - null (специальное значение)
 * - callable (функция обратного вызова)
 *
 *
 *          Действия с переменными:
 * 1. Присвоение значения.
 *      $my_var = 3;
 * 2. Проверка существования.
 *     isset($my_var);  // конструкция проверит существует ли (инициализированна ли) переменная
 *                      // isset и unset это не функции, а операторы языка
 * 3. Уничтожение.
 *      unset($my_var);
 *   полезнее для уничтожения элемента массива:
 *      unset($programs["angel"]);  // элемент удалится
 *
 *
 *          Определение типа переменной:
 *      gettype($var);      // Возвращает сторку со значением типа "array", "null"...
 *
 *      is_int($a);      // Возвращает true , если $а целое число
 *      is_double();
 *      is_infinite($a);    // Возвращает true, если $a -бесконечное действительно число INF.
 *      is_nan($a);    // Возвращает true, если $a -не допустимое числовое значение NAN.
 *      is_string();
 *      is_numeric();
 *      is_bool();
 *      is_scalar();
 *      is_null();
 *      is_array();
 *      is_object();
 *
 *
 *          Установка типа переменной:
 *      settype($var, $type);   // Функция пытается привести перемен $var к типу $type.
 *
 *      floatval($var);         // Перемен $var преобразуется в веществ число.
 *      strval($var);           // преобразуется к строке
 *      intval($var);           // преобраз в целочисленную
 *
 *      (int)$var;          // приведение к целому
 *      (bool)$var;
 *      (float)$var;            // К вещественному типу
 *      (string)$var;           // приведение к стороке
 *      (array)
 *      (object)
 *      (unset)                 // Приведение к null
 *
 *
 *          Оператор присваивания.
 *      $a = $b;        // Создастся поолноценная независимая копия. Два разных участка памяти.
 *      $a = $b; это есть выражение также как $a + $b;
 *
 *
 *          Жесткая ссылка.
 * Это переменная, которая является синонимом другой переменной.
 *      $a = 10;
 *      $b =& $a;   // Жжесткая ссылка. Это просто 2 синонима одной области памяти.
 *
 *          Символическая ссылка.
 *      $right = 'красная';
 *      $color = 'right';
 *      $$color = 'желтая';         // Переменн $right = 'желтая'
 *
 * $$ говорит интерперетатору, что нужно взять не значение переменной $color, а
 *  значение переменной, имя которой хранится в перемен $color.
 *
 *          Ссылки на объекты.
 * Начиная с PHP5? копирование объектов и массивов осуществляется по ссылке.
 *      listing-6-3
 *
 *
 *
 *                    Константы.
 * Когда значение величин, не меняется в течение работы программы.
 * Например математ константы, пути к файлам, разнообразные пароли и т.д.
 * Константа отличается от переменной:
 *  1. константе нельзя присвоить значение более одного раза во всей программе.
 *  2. имя константы не предваряется знаком $.
 *
 *                  Предопределенные константы.
 * Такие константы заданы самим интерпретатором, а другие задаютсясамим программистом.
 *
 *  Предопределенные константы:
 *      __FILE__    // Хранит имя файла, в котором расположен запущенный в настоящий момент код.
 *      __LINE__    // Содержит текущий номер строки, которую обрабатывает в данный момент интерпретатор.
 *                  // Эта своеобразная "константа" каждый раз меняется по ходу исполнения программы.
 *                  // (Впрочем __FILE__ также меняется, если мы передаем управление в другой файл).
 *      __FUNCTION__    // Имя текущей функции
 *      __CLASS__       // Имя текущего класса
 *      PHP_VERSION     // Версия интерпретатора РНР
 *      PHP_OS          // имя операционной системы, под управлением которой работает PHP
 *      PHP_EOL         // символ конца строки, используемый на текущей платформе: \n для Linux
 *                      // \r\n для Windows    \n\r  для Mac OS X
 *      tru
 *      false
 *      null
 *
 *
 *                  Определенные константы.
 *      define($name, $value);
 *      define("pi", 3.14);         // Имя константы в "" . Дважды константу определять нельзя.
 *
 *                  Проверка существования конставнты.
 *      defined($name);         // Вернет true, если константа $name была определена ранее.
 *
 *                  Константы с динамическими именами.
 * Если в процессе работы программы формируется константа, чье имя сформировано динамически,
 *  то к содержимому любой константы можем обратиться
 *      constant($name);        // Возвращает значение константы с именем $name
 *  listing 6-4
 *
 *
 *              Отладочные функции.
 *      print_r($var);      // на входе переменная (или выражение), на выходе распечатывается ее отладочное представление.
 *
 *      var_dump($var);     // печатает не только значения переменных и массивов, но и информацию об их типах
 *
 *      var_export($var);   // похожа на print_r, но значение переменной выводится так, что оно
 *                          // может быть использовано прямо как "кусок" PHP-программы
 *                          // listing-6-5
 *                          // Функция var_export() корректно обработает апострофы внутри значений переменных - она добавляет \ перед ними,
 *                          // чтобы результат оказался корректным кодом на PHP.
 *                          // Также для объектов функция создает описание всех свойств класса, в том числе и закрытых private
 *                          // var_export можно использовать, для автоматической генерации корректных PHP-скриптов из программы.
 *                          // МЫ получаем программы, которые пишут другие программы.
 * 
 *
 *
 *
 *
 *
 *
 *
 * 
 * 
 * 
 * 
 * 
 * 
 */